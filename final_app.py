# -*- coding: utf-8 -*-
"""final_app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EBahMsAthOEM2eWLkUAz52md25m9-6bn
"""

import streamlit as st
import pickle
import torch
import requests
from PIL import Image
from io import BytesIO
import numpy as np
from transformers import CLIPProcessor, CLIPModel
from langchain_community.vectorstores import FAISS
from langchain_community.docstore import InMemoryDocstore
from langchain.schema import Document

# Load model
device = "cuda" if torch.cuda.is_available() else "cpu"
clip_model = CLIPModel.from_pretrained("openai/clip-vit-base-patch32").to(device)
clip_processor = CLIPProcessor.from_pretrained("openai/clip-vit-base-patch32")

# Load data
with open("embeddings.pkl", "rb") as f:
    embeddings = pickle.load(f)

with open("docs.pkl", "rb") as f:
    docs = pickle.load(f)

import faiss
dimension = embeddings[0].shape[0]
index = faiss.IndexFlatL2(dimension)
index.add(np.stack(embeddings))
docstore = InMemoryDocstore({str(i): doc for i, doc in enumerate(docs)})
vectorstore = FAISS(index=index, docstore=docstore, index_to_docstore_id={i: str(i) for i in range(len(docs))}, embedding_function=None)

# App
st.title("üõçÔ∏è Multimodal E-commerce Chatbot")

query_text = st.text_input("Enter your product question:")
query_image = st.file_uploader("...or upload a product image", type=["jpg", "jpeg", "png"])

if st.button("Search"):
    if query_text:
        inputs = clip_processor(text=[query_text], return_tensors="pt", truncation=True).to(device)
        with torch.no_grad():
            features = clip_model.get_text_features(**inputs)
        query_vector = features[0].cpu().numpy()
    elif query_image:
        image = Image.open(query_image).convert("RGB")
        inputs = clip_processor(images=image, return_tensors="pt").to(device)
        with torch.no_grad():
            features = clip_model.get_image_features(**inputs)
        query_vector = features[0].cpu().numpy()
    else:
        st.warning("Please enter a query or upload an image.")
        st.stop()

    results = vectorstore.similarity_search_by_vector(query_vector, k=3)
    for i, r in enumerate(results):
        st.markdown(f"**Result {i+1}**")
        st.write(r.page_content)
        image_url = r.metadata.get("source")
        if image_url:
            try:
                response = requests.get(image_url)
                img = Image.open(BytesIO(response.content))
                st.image(img, caption="Product Image", use_column_width=True)
            except:
                st.warning("‚ö†Ô∏è Could not load image.")